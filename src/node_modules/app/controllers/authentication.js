const { get } = require('lodash');
const jwt = require('jsonwebtoken');

const {
  PasswordMatchError,
  NoUserError,
  MissingParamsError,
  NotFoundError,
} = require('app/errors');

module.exports = (service) => ({
  authenticateUser: async (p, q, body) => {
    const { username, password } = get(body, 'data.attributes', {});

    if (!username || !password) {
      throw new MissingParamsError(['username', 'password']);
    }

    const users = await service.db.collection('users')
      .where('username', '==', username)
      .get();

    if (!users) {
      throw new NoUserError(username);
    }

    let user = {};

    users.forEach((d, idx) => {
      if (!idx) {
        user = d;
      }
    });

    if (!Object.keys(user).length) {
      throw new NoUserError(username);
    }

    if (user.data().password !== password) {
      throw new PasswordMatchError();
    }

    const token = jwt.sign({
      username: user.data().username,
      firstName: user.data().firstName,
      lastName: user.data().lastName,
      tickets: user.data().tickets,
      id: user.id,
    }, service.configs.secretKey);

    return { token, id: user.id };
  },
  authMiddleware: (req, res, next) => {
    const authHeader = req.get('Authorization');

    if (!authHeader) {
      throw new NotFoundError();
    }

    const [_, token] = authHeader.split(' ');

    if (!token) {
      throw new NotFoundError();
    }

    try {
      req.user = jwt.verify(token, service.configs.secretKey);
      return next();
    } catch (e) {
      throw new NotFoundError();
    }
  },
});