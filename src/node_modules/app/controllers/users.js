const { groupBy, get } = require('lodash');

const {
  NoMoreTicketsError,
  UserIdMismatchError,
  NotFoundError,
} = require('app/errors');

module.exports = (service) => ({
  get: async (p, q, b, user) => {
    const userData = await service.db.query(`SELECT * FROM USERS WHERE id = ?`, user.id);

    const tickets = await service.db.query(`SELECT COUNT(*) AS tickets FROM TICKETS WHERE user_id = ?`, user.id);

    return Object.assign({}, userData[0], {
      tickets: {
        total: user.tickets,
        remaining: user.tickets - tickets[0].tickets,
      },
      iat: undefined, // blank out the iat from the token
      id: user.id,
    });
  },
  getPrizes: async (p, q, b, user) => {
    const userPrizes = await service.db.query(`
      SELECT id, category_id, title, description, image, committed_tickets
      FROM PRIZES P
        INNER JOIN (
          SELECT prize_id, COUNT(*) AS committed_tickets
          FROM TICKETS
          WHERE user_id = 30
          GROUP BY prize_id
        ) T
        ON P.id = T.prize_id
    `);

    return userPrizes;
  },
  commitTicket: async (p, q, body, userData) => {
    const { prize, user } = get(body, 'data.attributes');

    if (user !== userData.id) {
      throw new UserIdMismatchError(userData.id, user);
    }

    const existingPrize = await service.db.query(`SELECT id FROM PRIZES WHERE id = ?`, prize);

    if (existingPrize.length === 0) {
      throw new NotFoundError();
    }

    const tickets = await service.db.query(`SELECT COUNT(*) FROM TICKETS WHERE user_id = ?`, userData.id);

    if ((userData.tickets - tickets[0].length) < 1) {
      throw new NoMoreTicketsError();
    }

    const newTicket = await service.db.query(`INSERT INTO TICKETS (user_id, prize_id) VALUES (?, ?)`, [user, prize]);

    return {
      id: newTicket.insertId,
      user,
      prize,
    };
  },
});